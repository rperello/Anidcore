DEVELOPER NOTES
====

TO-DO:
* sub-controllers support (this strategy could be named HMVC+ ? )
* views and templates with multiple theme support
* flash messaging (using session)
* i18n strings
* Models with ActiveRecord pattern (Ac_Model_Record)
* code documentation, wiki and demos


MODLOG:

v0.5.0-WIP
* MOD   Now the framework targets only PHP 5.3+
* MOD   Ac_Global renamed to Ac_Model_Globals, Ac_Model_Globals_*,
        Ac_Dbc renamed to Ac_Storage_Pdo, Ac_Array to Ac_Object,
        Ac_Cache to Ac_Storage_Cache,
        Ac_Record to Ac_Model_Record, Ac_Logger to Ac_Log_file, ...
* NEW   Introducing magic static calls (on<eventname>, trigger<eventname>, etc) 
* NEW   Ac_Singleton, Ac_Loader, Ac_Log, Ac_Observer, ...
* MOD   The main Ac class has been now split into different singleton classes: Ac_Loader, Ac_Observer
* NEW   index.php now detects if there is an install.php file in the 'app' dir
* WIP   Oauth2 consumer / provider classes
* WIP   JSON-RPC client / server classes with JSONP compat.
* NEW   Set Access-Control Headers is now easier

* improved security making app and system folders private using .htaccess. check.php is now a private file.
* other bugfixes and improvements (better code readability and naming conventions)

---

v0.4.7
* NEW   Ac_Context now manages all server variables needed by the framework, that previously
        as generated by Ac_Request. Ac_Request is purely informational now.
* MOD   POST, GET, PUT, DELETE and COOKIE variables are now inside Ac_Request

* other improvements

---

v0.4.6
* NEW   i18n module and i18n URLs support (using the power of hooks)
* NEW   Facade functions Ac::url($of) and Ac::path($of) for better get urls and paths
* NEW   Modules resolves their url and paths well
* MOD   module defaults and initialization should be now inside instances of Ac_Module classes (Ac_Module_App, Ac_Module_Admin, etc)

* other improvements and bugfixes